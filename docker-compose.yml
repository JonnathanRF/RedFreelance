# RedFreelance/docker-compose.yml
# La línea 'version: '3.8'' ha sido eliminada

services:
  # Servicio de Autenticación
  auth-service:
    build: ./auth-service
    ports:
      - "8000:8000"
    volumes:
      - ./auth-service:/app
    env_file:
      - ./auth-service/.env
    depends_on:
      db:
        condition: service_healthy # auth-service ahora espera que la DB esté saludable

  # Servicio de Gestión de Servicios
  service-service:
    build: ./service-service
    ports:
      - "8001:8001"
    volumes:
      - ./service-service:/app
    env_file:
      - ./service-service/.env
    depends_on:
      db:
        condition: service_healthy # service-service ahora espera que la DB esté saludable
      auth-service:
        condition: service_started # También depende de auth-service

  # Servicio de Base de Datos PostgreSQL
  db:
    image: postgres:13-alpine # Usamos una imagen ligera de PostgreSQL 13
    ports:
      - "5432:5432" # Opcional: Mapea el puerto de PostgreSQL al host (útil para pgAdmin, etc.)
    volumes:
      - postgres_data:/var/lib/postgresql/data # Persistencia de datos para PostgreSQL
    environment: # Variables de entorno para configurar PostgreSQL
      POSTGRES_DB: redfreelance_db # Nombre de la base de datos
      POSTGRES_USER: user # Usuario de la base de datos
      POSTGRES_PASSWORD: password # Contraseña del usuario
    healthcheck: # Comprobación de salud para asegurar que la DB esté lista para conexiones
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 10s # Tiempo para que la DB inicie antes de empezar a chequear

volumes: # Define el volumen para la persistencia de datos de PostgreSQL
  postgres_data:
